---
- hosts: digitalocean

  tasks:
  - name: Include vars
    include_vars:
      file: vars.yml
      name: global

  - digital_ocean_sshkey_facts:
      oauth_token: "{{ do_token }}"

  - name: Create droplet
    digital_ocean: >
      state=present
      command=droplet
      name={{ item }}
      size_id={{ global.do_size }}
      unique_name=yes
      region_id={{ global.do_region }}
      image_id=docker-18-04
      ssh_key_ids={{ global.ssh_key_ids }}
      api_token={{ do_token }}
    with_items: "{{ global.droplets }}"
    register: droplet_details

  - name: Gen inventory worker
    add_host: name={{ item.droplet.name }} ansible_host={{ item.droplet.ip_address }} ansible_user=root groups=do
    with_items: "{{ droplet_details.results }}"

  - name: Before actions to hosts
    pause: seconds="30"
    when: droplet_details.changed

################################

- hosts: do
  gather_facts: False

  tasks:
  - name: Include vars
    include_vars:
      file: vars.yml
      name: global

  - name: Install python
    raw: test -e /usr/bin/apt && (apt -y update && apt install -y python-minimal) || (yum -y install python libselinux-python)

  - name: Install packages base
    apt: name={{ packages }} state=present
    vars:
      packages:
      - python-pip

  - name: Install docker py
    pip: name=docker state=present version=2.6

  - name: Delete rules docker ufw
    ufw: rule=allow port={{ item }} proto=tcp delete=yes
    with_items:
      - 2375
      - 2376

  - name: Open firewall ufw for cluster
    ufw: rule=allow src={{ hostvars[item]['ansible_host'] }}
    with_inventory_hostnames:
      - do
    when: inventory_hostname != "hostvars[item]['name']"

  - name: Init swarm
    docker_swarm: state=present advertise_addr="{{ ansible_host }}"
    when: inventory_hostname == global.droplets[0]
    register: swarm_info

  - name: Add nodes
    docker_swarm:
      state: join
      advertise_addr: "{{ ansible_host }}"
      join_token: "{{ hostvars[global.droplets[0]].swarm_info.swarm_facts.JoinTokens.Worker }}"
      remote_addrs: [ "{{ hostvars[global.droplets[0]].ansible_host }}:2377" ]
    when: inventory_hostname != global.droplets[0]

  - name: Copy docker-compose.yml and superset.sh files
    copy:
      src: "{{ item }}"
      dest: /root/
      owner: root
      mode: 600
    with_fileglob:
      - ../docker-compose.yml
      - ../superset/superset.sh
    when: inventory_hostname == global.droplets[0]

  - name: Run docker swarm
    command: docker stack deploy -c docker-compose.yml clickstream
    when: inventory_hostname == global.droplets[0]

  - name: Pause for 1 minute until apache/superset is up
    pause: minutes="1"

  - name: Find apache/superset container id and execute batch file
    command: bash superset.sh
    when: inventory_hostname == global.droplets[0]
